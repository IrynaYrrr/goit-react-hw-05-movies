{"version":3,"file":"static/js/961.20ca593c.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAAiD,6NAE1C,IAAMC,EAAkB,mCAAG,uGACTD,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAK,yCAHyB,uBACxBC,EADwB,EACxBA,KADwB,kBAKzBA,GALyB,2CAAH,qDAQlBC,EAAe,mCAAG,WAAOC,GAAP,0FACNN,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAI,UAAD,OAAYG,EAAZ,qBAHwB,uBACrBF,EADqB,EACrBA,KADqB,kBAKtBA,GALsB,2CAAH,sDAQfG,EAAO,mCAAG,WAAOD,GAAP,0FACEN,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAI,UAAD,OAAYG,EAAZ,8BAHgB,uBACbF,EADa,EACbA,KADa,kBAKdA,GALc,2CAAH,sDAQPI,EAAU,mCAAG,WAAOF,GAAP,0FACDN,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAI,UAAD,OAAYG,EAAZ,oCAHmB,uBAChBF,EADgB,EAChBA,KADgB,kBAKjBA,GALiB,2CAAH,sDAQVK,EAAgB,mCAAG,WAAOC,GAAP,0FACPV,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAI,uBAAD,OAAyBO,EAAzB,gDAHyB,uBACtBN,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,qD,iHCiC7B,UAlEqB,WAAO,IAAD,IAEzB,GAA0BO,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,MAAjC,eAAOK,EAAP,KAAaC,EAAb,KAEMC,GAAWC,EAAAA,EAAAA,MACTC,EAAOF,EAASG,MAAhBD,IAIRE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAI,oGAEfR,GAAa,GACbE,EAAQ,MAHO,UAIIZ,EAAAA,EAAAA,IAAgBe,GAJpB,OAIThB,EAJS,OAKfa,EAAQb,GALO,gDAOfS,EAAS,KAAMW,SAASpB,MAPT,yBASfW,GAAa,GATE,4EAAJ,qDAYfQ,GACD,GAAC,CAACH,IAEH,IAAMK,EAAY,oBAAGP,EAASG,aAAZ,aAAG,EAAgBK,YAAnB,QAA2B,UAE7C,OACE,gCACGd,IAAS,wBAAKA,IACdE,GAAY,qCACT,yBACCE,IACC,iCACE,SAAC,KAAD,CAAMW,GAAIF,EAAV,sBACA,mBACA,gBAAKG,IA7BA,kDA6BgBZ,EAAKa,YAAaC,IAAI,MAAMC,MAAO,CAAEC,MAAO,UACjE,0BAAKhB,EAAKiB,eAAV,KAA4BjB,EAAKkB,aAAaC,MAAM,KAAK,GAAzD,QACA,wCAAgBnB,EAAKoB,iBACrB,uCACA,uBAAIpB,EAAKqB,YACT,gDACA,uBAAIrB,EAAKsB,qBACT,mBACA,oDACA,2BACE,eAAIP,MAAO,CAAEQ,cAAe,QAA5B,UACE,SAAC,KAAD,CAAMZ,GAAE,kBAAaP,EAAb,SAAwBC,MAAOH,EAASG,MAAhD,qBAIF,eAAIU,MAAO,CAAEQ,cAAe,QAA5B,UACE,SAAC,KAAD,CAAMZ,GAAE,kBAAaP,EAAb,YAA2BC,MAAOH,EAASG,MAAnD,iCAUjB,C","sources":["api/getFilms.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.headers.common['Authorization'] = 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzYWRmOTEyZTExNzZhMTg1M2MxMzU2ZGI3MmFjMmFkYSIsInN1YiI6IjY1MmMwYWJjNzJjMTNlMDEzZDE1YzUzZSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.hzf05Uu31G7_NhpUWVecKABBc5ROUSkbQVOs-Yw6zYQ';\n\nexport const getCollectionFilms = async () => {\n  const { data } = await axios({\n    method: \"get\",\n    url: \"/movie/popular?language=en-US&page=1\",\n  })\n  return data\n}\n\nexport const getMovieDetails = async (movieId) => {\n  const { data } = await axios({\n    method: \"get\",\n    url: `/movie/${movieId}?language=en-US`,\n  })\n  return data\n}\n\nexport const getCast = async (movieId) => {\n  const { data } = await axios({\n    method: \"get\",\n    url: `/movie/${movieId}}/credits?language=en-US`,\n  })\n  return data\n}\n\nexport const getReviews = async (movieId) => {\n  const { data } = await axios({\n    method: \"get\",\n    url: `/movie/${movieId}/reviews?language=en-US&page=1`,\n  })\n  return data\n}\n\nexport const getFilmsBySearch = async (query) => {\n  const { data } = await axios({\n    method: \"get\",\n    url: `/search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n  })\n  return data\n}\n","import { getMovieDetails } from 'api/getFilms';\nimport React, { useEffect, useState } from 'react'\nimport { Link, useLocation } from 'react-router-dom';\n\nconst MovieDetails = () => {\n\n  const [error, setError] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [film, setFilm] = useState(null)\n\n  const location = useLocation()\n  const { id } = location.state;\n\n  const basePath = 'https://image.tmdb.org/t/p/w600_and_h900_bestv2';\n\n  useEffect(() => {\n    const fetchFilm = (async () => {\n      try {\n        setIsLoading(true)\n        setFilm(null)\n        const data = await getMovieDetails(id)\n        setFilm(data)\n      } catch (error) {\n        setError(error.response.data)\n      } finally {\n        setIsLoading(false)\n      }\n    })\n    fetchFilm()\n  },[id])\n\n  const backLinkHref = location.state?.from ?? \"/movies\";\n\n  return (\n    <>\n      {error && <h1>{error}</h1>}\n      {isLoading ? <h1>Loading</h1>\n        : <div>\n          {film && (\n            <>\n              <Link to={backLinkHref}>Go back</Link>\n              <br />\n              <img src={basePath + film.poster_path} alt='...' style={{ width: '20%' }} />\n              <h2>{film.original_title} ({film.release_date.split('-')[0]})</h2>\n              <p>User score: {film.vote_average}</p>\n              <h3>Overview:</h3>\n              <p>{film.overview}</p>\n              <h3>Original language:</h3>\n              <p>{film.original_language}</p>\n              <br />\n              <p>Additional information:</p>\n              <ul>\n                <li style={{ listStyleType: 'none' }}>\n                  <Link to={`/movies/${id}/cast`} state={location.state}>\n                    Cast\n                  </Link>\n                </li>\n                <li style={{ listStyleType: 'none' }}>\n                  <Link to={`/movies/${id}/reviews`} state={location.state}>\n                    Reviews\n                  </Link>\n                </li>\n              </ul>\n            </>\n          )}\n        </div>}\n    </>\n  )\n}\n\nexport default MovieDetails\n"],"names":["axios","getCollectionFilms","method","url","data","getMovieDetails","movieId","getCast","getReviews","getFilmsBySearch","query","useState","error","setError","isLoading","setIsLoading","film","setFilm","location","useLocation","id","state","useEffect","fetchFilm","response","backLinkHref","from","to","src","poster_path","alt","style","width","original_title","release_date","split","vote_average","overview","original_language","listStyleType"],"sourceRoot":""}
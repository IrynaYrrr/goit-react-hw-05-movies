{"version":3,"file":"static/js/186.82d97a52.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAAiD,6NAE1C,IAAMC,EAAkB,mCAAG,uGACTD,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAK,yCAHyB,uBACxBC,EADwB,EACxBA,KADwB,kBAKzBA,GALyB,2CAAH,qDAQlBC,EAAe,mCAAG,WAAOC,GAAP,0FACNN,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAI,UAAD,OAAYG,EAAZ,qBAHwB,uBACrBF,EADqB,EACrBA,KADqB,kBAKtBA,GALsB,2CAAH,sDAQfG,EAAO,mCAAG,WAAOD,GAAP,0FACEN,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAI,UAAD,OAAYG,EAAZ,8BAHgB,uBACbF,EADa,EACbA,KADa,kBAKdA,GALc,2CAAH,sDAQPI,EAAU,mCAAG,WAAOF,GAAP,0FACDN,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAI,UAAD,OAAYG,EAAZ,oCAHmB,uBAChBF,EADgB,EAChBA,KADgB,kBAKjBA,GALiB,2CAAH,sDAQVK,EAAgB,mCAAG,WAAOC,GAAP,0FACPV,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAI,uBAAD,OAAyBO,EAAzB,gDAHyB,uBACtBN,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,qD,kHCiB7B,UAjDgB,WACd,OAA0BO,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,MAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAEQX,GAAYY,EAAAA,EAAAA,MAAZZ,QAmBR,OAjBAa,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAI,oGAElBL,GAAa,GACbE,EAAW,MAHO,UAICT,EAAAA,EAAAA,IAAWF,GAJZ,OAIZF,EAJY,OAKlBa,EAAWb,EAAKiB,SALE,gDAOlBR,EAAS,KAAMS,SAASlB,MAPN,yBASlBW,GAAa,GATK,4EAAJ,qDAYlBK,GACD,GAAE,CAACd,IAGAM,GACK,wBAAKA,IAGVE,GACK,wCAIP,yBACGE,EAAQO,OAAS,GACd,wBACCP,EAAQQ,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASpB,EAApB,EAAoBA,QAApB,OACX,gBAAIqB,MAAO,CAAEC,cAAe,QAA5B,WACE,6BAAKH,MACL,kBACCC,IAHwCpB,EADhC,OAQb,SAAC,IAAD,KAGT,C","sources":["api/getFilms.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.headers.common['Authorization'] = 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzYWRmOTEyZTExNzZhMTg1M2MxMzU2ZGI3MmFjMmFkYSIsInN1YiI6IjY1MmMwYWJjNzJjMTNlMDEzZDE1YzUzZSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.hzf05Uu31G7_NhpUWVecKABBc5ROUSkbQVOs-Yw6zYQ';\n\nexport const getCollectionFilms = async () => {\n  const { data } = await axios({\n    method: \"get\",\n    url: \"/movie/popular?language=en-US&page=1\",\n  })\n  return data\n}\n\nexport const getMovieDetails = async (movieId) => {\n  const { data } = await axios({\n    method: \"get\",\n    url: `/movie/${movieId}?language=en-US`,\n  })\n  return data\n}\n\nexport const getCast = async (movieId) => {\n  const { data } = await axios({\n    method: \"get\",\n    url: `/movie/${movieId}}/credits?language=en-US`,\n  })\n  return data\n}\n\nexport const getReviews = async (movieId) => {\n  const { data } = await axios({\n    method: \"get\",\n    url: `/movie/${movieId}/reviews?language=en-US&page=1`,\n  })\n  return data\n}\n\nexport const getFilmsBySearch = async (query) => {\n  const { data } = await axios({\n    method: \"get\",\n    url: `/search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n  })\n  return data\n}\n","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { getReviews } from 'api/getFilms'\nimport NotFound from 'pages/NotFound/NotFound'\n\nconst Reviews = () => {\n  const [error, setError] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [reviews, setReviews] = useState(null)\n\n  const { movieId } = useParams()\n\n  useEffect(() => {\n    const fetchReviews = (async () => {\n      try {\n        setIsLoading(true)\n        setReviews(null)\n        const data = await getReviews(movieId)\n        setReviews(data.results)\n      } catch (error) {\n        setError(error.response.data)\n      } finally {\n        setIsLoading(false)\n      }\n    })\n    fetchReviews()\n  }, [movieId])\n\n\n  if (error) {\n    return <h1>{error}</h1>\n  }\n\n  if (isLoading) {\n    return <h1>Loading...</h1>\n  }\n\n  return (\n    <div>\n      {reviews.length > 0\n        ? <ul>\n          {reviews.map(({ author, content, movieId }) => (\n            <li style={{ listStyleType: 'none' }} key={movieId}>\n              <b> {author}</b>\n              <br />\n              {content}\n            </li>\n          ))}\n        </ul>\n        : <NotFound />}\n    </div>\n  )\n}\n\nexport default Reviews\n"],"names":["axios","getCollectionFilms","method","url","data","getMovieDetails","movieId","getCast","getReviews","getFilmsBySearch","query","useState","error","setError","isLoading","setIsLoading","reviews","setReviews","useParams","useEffect","fetchReviews","results","response","length","map","author","content","style","listStyleType"],"sourceRoot":""}
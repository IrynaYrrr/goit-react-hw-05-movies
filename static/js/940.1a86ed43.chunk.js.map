{"version":3,"file":"static/js/940.1a86ed43.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cAAiD,6NAE1C,IAAMC,EAAkB,mCAAG,uGACTD,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAK,yCAHyB,uBACxBC,EADwB,EACxBA,KADwB,kBAKzBA,GALyB,2CAAH,qDAQlBC,EAAe,mCAAG,WAAOC,GAAP,0FACNN,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAI,UAAD,OAAYG,EAAZ,qBAHwB,uBACrBF,EADqB,EACrBA,KADqB,kBAKtBA,GALsB,2CAAH,sDAQfG,EAAO,mCAAG,WAAOD,GAAP,0FACEN,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAI,UAAD,OAAYG,EAAZ,8BAHgB,uBACbF,EADa,EACbA,KADa,kBAKdA,GALc,2CAAH,sDAQPI,EAAU,mCAAG,WAAOF,GAAP,0FACDN,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAI,UAAD,OAAYG,EAAZ,oCAHmB,uBAChBF,EADgB,EAChBA,KADgB,kBAKjBA,GALiB,2CAAH,sDAQVK,EAAgB,mCAAG,WAAOC,GAAP,0FACPV,EAAAA,EAAAA,GAAM,CAC3BE,OAAQ,MACRC,IAAI,uBAAD,OAAyBO,EAAzB,gDAHyB,uBACtBN,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,qD,oNCwB7B,EAtDa,WACX,OAA0BO,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,MAAjC,eAAOK,EAAP,KAAaC,EAAb,KAEQX,GAAYY,EAAAA,EAAAA,MAAZZ,QAoBR,OAhBAa,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAI,oGAEfL,GAAa,GACbE,EAAQ,MAHO,UAIIV,EAAAA,EAAAA,IAAQD,GAJZ,OAITF,EAJS,OAKfa,EAAQb,EAAKY,MALE,gDAOfH,EAAS,KAAMQ,SAASjB,MAPT,yBASfW,GAAa,GATE,4EAAJ,qDAYfK,GACD,GAAE,CAACd,IAEAM,GACK,wBAAKA,IAGVE,GACK,wCAIP,0BACO,OAAJE,QAAI,IAAJA,OAAA,EAAAA,EAAMM,QAAS,GACd,wBACGN,EAAKO,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,GAAlC,OACR,eAAIC,MAAO,CAAEC,cAAe,QAA5B,UACE,4BACE,gBAAKC,IAAKN,EAjCP,kDAiCiCA,EAAeO,EAASC,IAAI,MAAMJ,MAAO,CAAEK,MAAO,UACtF,wBAAKR,KACL,uBAAIC,KACJ,eAAIE,MAAO,CAAEM,OAAQ,yBALkBP,EADnC,OAYV,SAACQ,EAAA,EAAD,KAGT,C","sources":["api/getFilms.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.headers.common['Authorization'] = 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzYWRmOTEyZTExNzZhMTg1M2MxMzU2ZGI3MmFjMmFkYSIsInN1YiI6IjY1MmMwYWJjNzJjMTNlMDEzZDE1YzUzZSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.hzf05Uu31G7_NhpUWVecKABBc5ROUSkbQVOs-Yw6zYQ';\n\nexport const getCollectionFilms = async () => {\n  const { data } = await axios({\n    method: \"get\",\n    url: \"/movie/popular?language=en-US&page=1\",\n  })\n  return data\n}\n\nexport const getMovieDetails = async (movieId) => {\n  const { data } = await axios({\n    method: \"get\",\n    url: `/movie/${movieId}?language=en-US`,\n  })\n  return data\n}\n\nexport const getCast = async (movieId) => {\n  const { data } = await axios({\n    method: \"get\",\n    url: `/movie/${movieId}}/credits?language=en-US`,\n  })\n  return data\n}\n\nexport const getReviews = async (movieId) => {\n  const { data } = await axios({\n    method: \"get\",\n    url: `/movie/${movieId}/reviews?language=en-US&page=1`,\n  })\n  return data\n}\n\nexport const getFilmsBySearch = async (query) => {\n  const { data } = await axios({\n    method: \"get\",\n    url: `/search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n  })\n  return data\n}\n","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { getCast } from 'api/getFilms'\nimport noPhoto from '../../assets/no-photo-icon.png';\nimport NotFound from 'pages/NotFound/NotFound';\n\n\nconst Cast = () => {\n  const [error, setError] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [cast, setCast] = useState(null)\n\n  const { movieId } = useParams()\n\n  const basePath = 'https://image.tmdb.org/t/p/w600_and_h900_bestv2';\n\n  useEffect(() => {\n    const fetchCast = (async () => {\n      try {\n        setIsLoading(true)\n        setCast(null)\n        const data = await getCast(movieId)\n        setCast(data.cast)\n      } catch (error) {\n        setError(error.response.data)\n      } finally {\n        setIsLoading(false)\n      }\n    })\n    fetchCast()\n  }, [movieId])\n\n  if (error) {\n    return <h1>{error}</h1>\n  }\n\n  if (isLoading) {\n    return <h1>Loading...</h1>\n  }\n\n  return (\n    <div>\n      {cast?.length > 0 ?\n        <ul>\n          {cast.map(({ profile_path, name, character, id }) => (\n            <li style={{ listStyleType: 'none' }} key={id}>\n              <div>\n                <img src={profile_path ? basePath + profile_path : noPhoto} alt='...' style={{ width: '20%' }} />\n                <h3>{name}</h3>\n                <p>{character}</p>\n                <hr style={{ border: '2px solid black' }} />\n              </div>\n            </li>\n          ))\n          }\n        </ul>\n        : <NotFound />}\n    </div>\n  )\n}\n\nexport default Cast\n"],"names":["axios","getCollectionFilms","method","url","data","getMovieDetails","movieId","getCast","getReviews","getFilmsBySearch","query","useState","error","setError","isLoading","setIsLoading","cast","setCast","useParams","useEffect","fetchCast","response","length","map","profile_path","name","character","id","style","listStyleType","src","noPhoto","alt","width","border","NotFound"],"sourceRoot":""}